{
  "name": "gray-matter",
  "description": "Parse front-matter from a string or file. Fast, reliable and easy to use. Parses YAML front matter by default, but also has support for YAML, JSON, TOML or Coffee Front-Matter, with options to set custom delimiters.",
  "version": "2.0.0",
  "author": {
    "name": "Jon Schlinkert",
    "url": "https://github.com/jonschlinkert"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/jonschlinkert/gray-matter.git"
  },
  "bugs": {
    "url": "https://github.com/jonschlinkert/gray-matter/issues"
  },
  "license": "MIT",
  "files": [
    "index.js",
    "lib/"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "chalk": "^1.0.0",
    "extend-shallow": "^1.1.2"
  },
  "devDependencies": {
    "benchmarked": "^0.1.3",
    "coffee-script": "^1.8.0",
    "delimiter-regex": "^1.1.0",
    "for-own": "^0.1.2",
    "front-matter": "^0.2.1",
    "glob": "^4.2.1",
    "gulp": "^3.8.10",
    "gulp-istanbul": "^0.5.0",
    "gulp-mocha": "^2.0.0",
    "js-yaml": "^3.2.7",
    "lodash": "^2.4.1",
    "minimist": "^1.1.0",
    "mocha": "^1.19.0",
    "should": "^4.3.0",
    "sort-object": "^0.3.2",
    "toml": "^2.0.6"
  },
  "keywords": [
    "assemble",
    "JSON",
    "coffee",
    "coffee-script",
    "data",
    "docs",
    "documentation",
    "extract",
    "extracting",
    "front",
    "front-matter",
    "frontmatter",
    "generate",
    "generator",
    "gh-pages",
    "javascript",
    "jekyll",
    "js",
    "markdown",
    "matter",
    "parse",
    "parser",
    "parsing",
    "template",
    "site",
    "static",
    "toml",
    "yaml",
    "yfm"
  ],
  "readme": "# gray-matter [![NPM version](https://badge.fury.io/js/gray-matter.svg)](http://badge.fury.io/js/gray-matter)  [![Build Status](https://travis-ci.org/jonschlinkert/gray-matter.svg)](https://travis-ci.org/jonschlinkert/gray-matter) \n\n> Parse front-matter from a string or file. Fast, reliable and easy to use. Parses YAML front matter by default, but also has support for YAML, JSON, TOML or Coffee Front-Matter, with options to set custom delimiters.\n\nSee the [benchmarks](#benchmarks). gray-matter is 15-30x faster than [front-matter]().\n\n## Highlights\n\n* Reliable and battle-tested with [assemble](https://github.com/assemble/assemble), [verb](https://github.com/assemble/verb), and many other projects!\n* Will extract and parse:\n  * [YAML](http://github.com/nodeca/js-yaml)\n  * [JSON](http://en.wikipedia.org/wiki/Json)\n  * [TOML](http://github.com/mojombo/toml)\n  * [CoffeeScript](http://coffeescript.org) when `options.eval` is set to `true`\n  * [CSON](https://github.com/bevry/cson) when `options.eval` is set to `true`\n  * JavaScript: when `options.eval` is set to `true`\n* Easy to add additional parsers! pull requests welcome!\n\n\n## Install with [npm](npmjs.org)\n\n```bash\nnpm i gray-matter --save\n```\n## Install with [bower](https://github.com/bower/bower)\n\n```bash\nbower install gray-matter --save\n```\n\n\n## Usage\n\n```js\nvar matter = require('gray-matter');\nmatter('---\\ntitle: Front Matter\\n---\\nThis is content.');\n```\n\nReturns:\n\n```js\n{ \n  orig: '---\\ntitle: Front Matter\\n---\\nThis is content.',\n  data: { title: 'Front Matter' },\n  content: '\\nThis is content.' \n}\n```\n\nThat's it! Just pass a string and gray-matter returns an object.\n\n\n***\n\n\n## API\n### [matter](./index.js#L30)\n\nParses a `string` of front-matter with the given `options`, and returns an object.\n\n* `string` **{String}**: The string to parse.    \n* `options` **{Object}**  \n    - `delims` **{Array}**: Custom delimiters formatted as an array. The default is `['---', '---']`.\n    - `parser` **{Function}**: Parser function to use. [js-yaml] is the default.\n      \n* `returns` **{Object}**: Valid JSON  \n\n```js\nmatter('---\\ntitle: foo\\n---\\nbar');\n//=> {data: {title: 'foo'}, content: 'bar', orig: '---\\ntitle: foo\\n---\\nbar'}\n```\n\n### [.read](./index.js#L134)\n\nRead a file and parse front matter. Returns the same object as `matter()`.\n\n* `fp` **{String}**: file path of the file to read.    \n* `options` **{Object}**: Options to pass to gray-matter.    \n* `returns`: {Object}  \n\n```js\nmatter.read('home.md');\n```\n\n### [.stringify](./index.js#L165)\n\nStringify an object to front-matter-formatted YAML, and concatenate it to the given string.\n\n* `str` **{String}**: The content string to append to stringified front-matter.    \n* `data` **{Object}**: Front matter to stringify.    \n* `options` **{Object}**: Options to pass to js-yaml    \n* `returns`: {String}  \n\n```js\nmatter.stringify('foo bar baz', {title: 'Home'});\n```\n\nResults in:\n\n```yaml\n---\ntitle: Home\n---\nfoo bar baz\n```\n\n\n## Options\n\n> All methods exposed on the API accept an options object passed as the last argument\n\n## options.parser\nType: `Function`\n\nDefault: `undefined`\n\nPass a custom parser on the options. This is useful if you need to, for example, define custom schemas for [js-yaml].\n\n**Example**\n\n```js\nmatter(str, {\n  parser: require('js-yaml').safeLoad\n});\n```\n\n## options.eval\nType: `Boolean`\n\nDefault: `false`\n\nEvaluate coffee-script, CSON or JavaScript in front-matter. If you aren't aware of the dangers, google is your friend. \n\nHowever, if you are aware and you only use front-matter on, say, blog posts for a static site... this feature can be pretty useful.\n\n\n## options.lang\nType: `String`\n\nDefault: `yaml`\n\nThe parser to use on the extracted front matter. \n\nYAML is parsed by default, and the languages listed below are parsed automatically if the language is specified after the first delimiter (e.g. `---`). \n\nValid languages are:\n\n* `yaml`\n* `json`\n* `coffee` \n* `cson` \n* `toml` \n* `js`|`javascript`\n\n**Example**\n\nTo parse coffee front matter, you would define it as follows:\n\n```js\n---coffee\ntitle: 'coffee functions'\nuser: 'jonschlinkert'\nfn:\n  reverse = (src) ->\n    src.split('').reverse().join('')\n---\n\n<%= description %>\n<%= reverse(user) %>\n```\n\n## options.delims\nType: `String`\n\nDefault: `---`\n\nOpen and close delimiters can be passed in as an array of strings. \n\n**Example:**\n\n```js\n// format delims as a string\nmatter.read('file.md', {delims: '~~~'});\n// or an array (open/close)\nmatter.read('file.md', {delims: ['~~~', '~~~']});\n```\n\nwould parse:\n\n<pre>\n~~~\ntitle: Home\n~~~\nThis is the {{title}} page.\n</pre>\n\n\n## Example usage\n\nGiven we have a page, `abc.html`, containing:\n\n```html\n---\ntitle: YAML Front matter\ndescription: This is a page\n---\n<h1>{{title}}</h1>\n```\n\nthen running the following in the command line:\n\n```js\nmatter('abc.html');\n```\nreturns\n\n```json\n{\n  \"data\": {\n    \"title\": \"YAML Front matter\",\n    \"description\": \"This is a page\"\n  },\n  \"content\": \"<h1>{{title}}</h1>\",\n  \"original\": \"---\\ntitle: YAML Front matter\\n---\\n<h1>{{title}}</h1>\"\n}\n```\n\n## Benchmarks\n\n**Blog**\n\nThe following benchmarks reflect the processing time for all markdown posts in the [bootstrap-blog].\n\n```\nfront-matter.js x 271 ops/sec ±2.68% (80 runs sampled)\ngray-matter.js x 4,294 ops/sec ±0.86% (91 runs sampled)\n```\n\n**Misc**\n\ngray-matter is 12-20x faster than [front-matter] when content or front matter actually exist.\n\n```bash\n#1: complex.js\n  front-matter.js x 433 ops/sec ±1.21% (91 runs sampled)\n  gray-matter.js x 9,491 ops/sec ±1.07% (92 runs sampled)\n\n#2: empty.js\n  front-matter.js x 5,744,976 ops/sec ±0.76% (99 runs sampled)\n  gray-matter.js x 18,048,669 ops/sec ±0.84% (93 runs sampled)\n\n#3: matter.js\n  front-matter.js x 10,739 ops/sec ±2.65% (84 runs sampled)\n  gray-matter.js x 201,322 ops/sec ±0.71% (93 runs sampled)\n\n#4: no-content.js\n  front-matter.js x 13,097 ops/sec ±3.00% (82 runs sampled)\n  gray-matter.js x 198,441 ops/sec ±0.49% (101 runs sampled)\n\n#5: no-matter.js\n  front-matter.js x 5,420,088 ops/sec ±0.79% (96 runs sampled)\n  gray-matter.js x 9,559,091 ops/sec ±1.33% (92 runs sampled)\n```\n\n\n## Why?\n\n> Why another YAML Front Matter library?\n\nBecause other libraries we tried failed to meet our requirements with [Assemble](http://assemble.io). Some most of the libraries met most of the requirements, but _none had all of them_. Here are the most important:\n\n* Be usable, if not simple\n* Allow custom delimiters\n* Use a dependable and well-supported library for parsing YAML and other languages\n* Don't fail when no content exists\n* Don't fail when no front matter exists\n* Have no problem reading YAML files directly\n* Have no problem with complex content, including fenced code blocks that contain examples of YAML front matter. Other parsers fail on this.\n* Should return an object that contains the parsed YAML front matter and content, as well as the \"original\" content.\n\n\n## Running tests\nInstall dev dependencies:\n\n```bash\nnpm i -d && npm test\n```\n\n\n## Authors\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert) \n\n## License\nCopyright (c) 2015 Jon Schlinkert  \nReleased under the MIT license\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on March 26, 2015._\n\n\n[js-yaml]: https://github.com/nodeca/js-yaml\n[coffee-script]: https://github.com/jashkenas/coffeescript\n[toml-node]: https://github.com/BinaryMuse/toml-node\n[bootstrap-blog]: https://github.com/twbs/bootstrap-blog/tree/gh-pages/_posts",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/jonschlinkert/gray-matter",
  "_id": "gray-matter@2.0.0",
  "_from": "gray-matter@^2.0.0"
}
