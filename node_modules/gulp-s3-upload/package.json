{
  "name": "gulp-s3-upload",
  "version": "1.0.4",
  "description": "A gulp task to upload/update assets to an S3 account.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/clineamb/gulp-s3-upload.git"
  },
  "keywords": [
    "gulp",
    "s3",
    "aws",
    "upload"
  ],
  "author": {
    "name": "Caroline Amaba",
    "email": "her@carolineamaba.com"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/clineamb/gulp-s3-upload/issues"
  },
  "homepage": "https://github.com/clineamb/gulp-s3-upload",
  "dependencies": {
    "aws-sdk": "2.1.17",
    "gulp-util": "^3.0.4",
    "mime": "1.3.4",
    "through2": "0.6.3",
    "underscore": "1.8.2"
  },
  "readme": "# gulp-s3-upload\n\nUse for uploading assets to Amazon S3 servers.  \nThis helps to make it an easy gulp task.\n\nThis package uses the [aws-sdk (node)](http://aws.amazon.com/sdk-for-node-js/).\n\n[NPM](https://www.npmjs.com/package/gulp-s3-upload) / [Changelog](docs/changelog.md)\n\n## Install\n\n    npm install gulp-s3-upload\n\n## Usage\n\nPut in your AWS Developer key/secret. These are required, or else the plugin doesn't have access to the bucket you want to upload to.\n\n```js\n    var gulp = require('gulp');\n    var s3 = require('gulp-s3-upload')({\n        accessKeyId:        \"YOUR DEV ID\",\n        secretAccessKey:    \"YOUR SECRET\"\n    });\n```\nThe other options not mentioned above (like `region`) available in the [AWS Config Constructor](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Config.html#constructor-property) are also available, though by default are `undefined`.\n\nOption names `key` and `secret` are also alternative option names, though the use of `accessKeyId` and `secretAccessKey` are encouraged to match the AWS Config Constructor.\n\nCreate a task.\n\n```js\n    gulp.task(\"upload\", function() {\n        gulp.src(\"./dir/to/upload/**\")\n            .pipe(s3({\n                Bucket: 'your-bucket-name', //  Required\n                ACL:    'public-read'       //  Needs to be user-defined\n            }))\n        ;\n    });\n```\n## Options\n\n**Bucket (bucket)** *(required)*\n\nType: `string`\n\nThe bucket that the files will be uploaded to.\n\nOther available options are the same as the ones found in the AWS-SDK docs for S3.  The end of the readme below for a list of availble AWS-SDK resources that this plugin constantly references.\n\n**NOTE:** `Key`, `Body`, and `ContentType` are the only options availble in `putObject` that do **NOT** need to be defined because the gulp will handle these for you. If these are defined, the plugin will filter them out.\n\n### gulp-s3-plugin options\n\n### charset\n\nType: `string`\n\nUse this to add a charset to the mimetype. `\"charset=[CHARSET]\"` gets appended to the mimetype if this is defined.\n\n\n#### keyTransform (nameTransform)\n\nType: `function`\n\nUse this to transform your file names before they're uploaded to your S3 bucket.  \n(Previously known as `name_transform`).\n\n```js\n    gulp.task(\"upload_transform\", function() {\n        gulp.src(\"./dir/to/upload/**\")\n            .pipe(s3({\n                Bucket: 'example-bucket',\n                ACL: 'public-read',\n                keyTransform: function(relative_filename) {\n                    var new_name = changeFileName(relative_filename);\n                    // or do whatever you want\n                    return new_name;\n                }\n            }))\n        ;\n    });\n```\n\n\n#### metadataMap\n\nType: `object` or `function`\n\nIf you have constant metadata you want to attach to each object,\njust define the object, and it will be included to each object.\nIf you wish to change it per object, you can pass a function through\nto modify the metadata based on the (transformed) keyname.\n\nExample (passing an `object`):\n```js\n    gulp.task(\"upload\", function() {\n        gulp.src(\"./dir/to/upload/**\")\n        .pipe(s3({\n            Bucket: 'example-bucket',\n            ACL: 'public-read',\n            metadataMap: {\n                \"uploadedVia\": \"gulp-s3-upload\",\n                \"exampleFlag\":  \"Asset Flag\"\n            }\n        }));\n    });\n```\nPassing the `s3.putObject` param option `Metadata` is effectively the same thing\nas passing an `object` to `metadataMap`.  `Metadata` is defined and `metadataMap` is not\nit will use the object passed to `Metadata` as metadata for all the files that\nwill be uploaded.  If both `Metadata` and `metadataMap` are defined, `Metadata` will take\nprecedence and be added to each file being uploaded.\n\nExample (passing a `function`):\n\n```js    \n    // ... setup gulp-s3-upload ...\n    var path = require('path');\n    var metadata_collection = {\n        \"file1.txt\": {\n            \"uploadedVia\": \"gulp-s3-upload\",\n            \"example\": \"Example Data\"\n        },\n        \"file2.html\": {\n            \"uploadedVia\": \"gulp-s3-upload\"\n        }\n    };\n\n    gulp.task(\"uploadWithMeta\", function() {\n        gulp.src(\"./upload/**\")\n        .pipe(s3({\n            Bucket: 'example-bucket',\n            ACL: 'public-read',\n            metadataMap: function(keyname) {\n                path.basename(keyname); // just get the filename\n                return metadata_collection[keyname]; // return an object\n            }\n        }));\n    });\n```\n\nWhen passing a function, it's important to note that the file\nwill already be transformed either by the `keyTransform` you defined\nor by the default function which creates a keyname relative to\nyour S3 bucket, e.g. you can get \"example.txt\" or \"docs/example.txt\"\ndepending on how it was structured locally (hence why in the example, \nthe `path` module is used to just get the filename).\n\n**Note:** You should be responsible for handling mismatching/unmatched keynames\nto the metadata you're mapping.\n\n\n#### mimeTypeLookup\n\nType: `function`\n\nUse this to transform what the key that is used to match the MIME type when uploading to S3.\n\n```js\n    gulp.task(\"upload\", function() {\n        gulp.src(\"./dir/to/upload/**\")\n        .pipe(s3({\n            Bucket: 'example-bucket',\n            ACL: 'public-read',\n            mimeTypelookup: function(original_keyname) {\n                return original_keyname.replace('.gz', ''); // ignore gzip extension\n            },\n        }));\n    });\n```\n\n\n#### uploadNewFilesOnly\n\nType: `boolean`\n\nSet `uploadNewFilesOnly: true` if you only want to upload new files and not\noverwrite existing ones.\n\n\n\n## AWS-SDK References\n\n* [AWS Config Constructor](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Config.html#constructor-property)\n* [S3 putObject](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putObject-property)\n* [Access Control List (ACL) Overview](http://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html)\n\n----------------------------------------------------\n\n## License\n\nCopyright (c) 2014, [Caroline Amaba](mailto:caroline.amaba@gmail.com)\n\nPermission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n",
  "readmeFilename": "Readme.md",
  "_id": "gulp-s3-upload@1.0.4",
  "dist": {
    "shasum": "f5c0333dafe5d12972405b224603d67fc2e35ba5"
  },
  "_from": "gulp-s3-upload@",
  "_resolved": "https://registry.npmjs.org/gulp-s3-upload/-/gulp-s3-upload-1.0.4.tgz"
}
